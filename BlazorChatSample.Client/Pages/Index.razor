@using BlazorChatSample.Shared 
@page "/"
@inject NavigationManager navigationManager
<div></div>
@if (inGame)
{
    <div class="sidebar">
        <NavMenu />
    </div>
}
<div class="top-row px-4 mainPage">
    @if (inGame)
    {
    <p>You are connected as <b>@startGameData.UserName</b> to the room  <b>@startGameData.RoomName</b> </p>
        <button class="btn btn-sm btn-warning ml-md-auto" @onclick="@DisconnectAsync">Disconnect</button>
    }
</div>

<div class="content px-4">

    <h1>Inspector board game</h1>

    @if (!inGame)
    {
        @* Moved instructions to shared component *@
        <Instructions />
        <GameStart AvailableRooms="@rooms" OnGameStart="@StartGame" />
        <h2></h2>
        @if (message != null)
        {
            <div class="invalid-feedback">@message</div>
            <small id="emailHelp" class="form-text text-muted">@message</small>
        }
    }

    @if (inGame)
    {
        <div id="scrollbox">

            @foreach (var item in messages)
            {
                <div class="@item.CSS">
                    <div class="user">@item.Username</div>
                    <div class="msg">@item.Body</div>
                </div>
            }
            <hr />
            <textarea class="input-lg" placeholder="enter your comment" @bind="@newMessage"></textarea>
            <button class="btn btn-default" @onclick="@SendAsync">Send</button>
        </div>
    }
</div>

@code  {
    bool inGame = false;

    string username = null;

    string roomName = null;

    GameClient client = null;

    string message = null;

    string newMessage = null;

    List<Message> messages = new List<Message>();

    StartGameData startGameData = null;

    List<GameRoom> rooms = new List<GameRoom>()
    {
        new GameRoom()
        {
            GuestCount = "1",
            Name = "room1",

        },
        new GameRoom()
        {
            GuestCount = "1",
            Name = "room2",
        }
    };


    async Task StartGame(StartGameData data)
    {
        if (string.IsNullOrWhiteSpace(data.UserName))
        {
            message = "Please enter a name";
            return;
        };
        if (string.IsNullOrWhiteSpace(data.RoomName))
        {
            message = "Please select room";
            return;
        };
        try
        {
            startGameData = data;
            messages.Clear();
            string baseUrl = navigationManager.BaseUri;
            client = new GameClient(data.UserName, data.RoomName, baseUrl);
            client.MessageReceived += MessageReceived;
            Console.WriteLine("Index: chart starting...");
            await client.StartAsync();
            Console.WriteLine("Index: chart started?");
            inGame = true;
        }
        catch (Exception e)
        {
            message = $"ERROR: Failed to start chat client: {e.Message}";
            Console.WriteLine(e.Message);
            Console.WriteLine(e.StackTrace);
        }
    }

    void MessageReceived(object sender, MessageReceivedEventArgs e)
    {
        bool isMine = false;
        if (!string.IsNullOrWhiteSpace(e.Username))
        {
            isMine = string.Equals(e.Username, username, StringComparison.CurrentCultureIgnoreCase);
        }
        var newMsg = new Message(e.Username, e.Message, isMine);
        messages.Add(newMsg);
        StateHasChanged();
    }

    async Task DisconnectAsync()
    {
        if (inGame)
        {
            await client.StopAsync();
            client = null;
            message = "";
            inGame = false;
        }
    }

    async Task SendAsync()
    {
        if (inGame && !string.IsNullOrWhiteSpace(newMessage))
        {
            await client.SendAsync(newMessage);
            newMessage = "";
        }
    }

    class Message
    {
        public Message(string username, string body, bool mine)
        {
            Username = username;
            Body = body;
            Mine = mine;
        }

        public string Username { get; set; }
        public string Body { get; set; }
        public bool Mine { get; set; }

        public string CSS
        {
            get
            {
                return Mine ? "sent" : "received";
            }
        }
    }

}